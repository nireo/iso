// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_entry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_entry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021010 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/port_undef.inc>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_entry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_entry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_entry_2eproto;
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>::Entry *Arena::CreateMaybeMessage<::Entry>(Arena *);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Entry final
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:Entry) */ {
public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  explicit PROTOBUF_CONSTEXPR
      Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry &from);
  Entry(Entry &&from) noexcept : Entry() { *this = ::std::move(from); }

  inline Entry &operator=(const Entry &from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry &operator=(Entry &&from) noexcept {
    if (this == &from)
      return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry &default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry *internal_default_instance() {
    return reinterpret_cast<const Entry *>(&_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(Entry &a, Entry &b) { a.Swap(&b); }
  inline void Swap(Entry *other) {
    if (other == this)
      return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry &from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Entry &from) { Entry::MergeImpl(*this, from); }

private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message &to_msg,
                        const ::PROTOBUF_NAMESPACE_ID::Message &from_msg);

public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  uint8_t *_InternalSerialize(
      uint8_t *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry *other);

private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entry";
  }

protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                 bool is_message_owned = false);

public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumesFieldNumber = 1,
    kHashFieldNumber = 2,
    kDeletedFieldNumber = 3,
  };
  // repeated string volumes = 1;
  int volumes_size() const;

private:
  int _internal_volumes_size() const;

public:
  void clear_volumes();
  const std::string &volumes(int index) const;
  std::string *mutable_volumes(int index);
  void set_volumes(int index, const std::string &value);
  void set_volumes(int index, std::string &&value);
  void set_volumes(int index, const char *value);
  void set_volumes(int index, const char *value, size_t size);
  std::string *add_volumes();
  void add_volumes(const std::string &value);
  void add_volumes(std::string &&value);
  void add_volumes(const char *value);
  void add_volumes(const char *value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *mutable_volumes();

private:
  const std::string &_internal_volumes(int index) const;
  std::string *_internal_add_volumes();

public:
  // string hash = 2;
  void clear_hash();
  const std::string &hash() const;
  template <typename ArgT0 = const std::string &, typename... ArgT>
  void set_hash(ArgT0 &&arg0, ArgT... args);
  std::string *mutable_hash();
  PROTOBUF_NODISCARD std::string *release_hash();
  void set_allocated_hash(std::string *hash);

private:
  const std::string &_internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void
  _internal_set_hash(const std::string &value);
  std::string *_internal_mutable_hash();

public:
  // int32 deleted = 3;
  void clear_deleted();
  int32_t deleted() const;
  void set_deleted(int32_t value);

private:
  int32_t _internal_deleted() const;
  void _internal_set_deleted(int32_t value);

public:
  // @@protoc_insertion_point(class_scope:Entry)
private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> volumes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    int32_t deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_entry_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// Entry

// repeated string volumes = 1;
inline int Entry::_internal_volumes_size() const {
  return _impl_.volumes_.size();
}
inline int Entry::volumes_size() const { return _internal_volumes_size(); }
inline void Entry::clear_volumes() { _impl_.volumes_.Clear(); }
inline std::string *Entry::add_volumes() {
  std::string *_s = _internal_add_volumes();
  // @@protoc_insertion_point(field_add_mutable:Entry.volumes)
  return _s;
}
inline const std::string &Entry::_internal_volumes(int index) const {
  return _impl_.volumes_.Get(index);
}
inline const std::string &Entry::volumes(int index) const {
  // @@protoc_insertion_point(field_get:Entry.volumes)
  return _internal_volumes(index);
}
inline std::string *Entry::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:Entry.volumes)
  return _impl_.volumes_.Mutable(index);
}
inline void Entry::set_volumes(int index, const std::string &value) {
  _impl_.volumes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Entry.volumes)
}
inline void Entry::set_volumes(int index, std::string &&value) {
  _impl_.volumes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Entry.volumes)
}
inline void Entry::set_volumes(int index, const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.volumes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Entry.volumes)
}
inline void Entry::set_volumes(int index, const char *value, size_t size) {
  _impl_.volumes_.Mutable(index)->assign(reinterpret_cast<const char *>(value),
                                         size);
  // @@protoc_insertion_point(field_set_pointer:Entry.volumes)
}
inline std::string *Entry::_internal_add_volumes() {
  return _impl_.volumes_.Add();
}
inline void Entry::add_volumes(const std::string &value) {
  _impl_.volumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Entry.volumes)
}
inline void Entry::add_volumes(std::string &&value) {
  _impl_.volumes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Entry.volumes)
}
inline void Entry::add_volumes(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.volumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Entry.volumes)
}
inline void Entry::add_volumes(const char *value, size_t size) {
  _impl_.volumes_.Add()->assign(reinterpret_cast<const char *>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Entry.volumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &
Entry::volumes() const {
  // @@protoc_insertion_point(field_list:Entry.volumes)
  return _impl_.volumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *
Entry::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:Entry.volumes)
  return &_impl_.volumes_;
}

// string hash = 2;
inline void Entry::clear_hash() { _impl_.hash_.ClearToEmpty(); }
inline const std::string &Entry::hash() const {
  // @@protoc_insertion_point(field_get:Entry.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Entry::set_hash(ArgT0 &&arg0, ArgT... args) {

  _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args...,
                   GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Entry.hash)
}
inline std::string *Entry::mutable_hash() {
  std::string *_s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:Entry.hash)
  return _s;
}
inline const std::string &Entry::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void Entry::_internal_set_hash(const std::string &value) {

  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string *Entry::_internal_mutable_hash() {

  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string *Entry::release_hash() {
  // @@protoc_insertion_point(field_release:Entry.hash)
  return _impl_.hash_.Release();
}
inline void Entry::set_allocated_hash(std::string *hash) {
  if (hash != nullptr) {

  } else {
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Entry.hash)
}

// int32 deleted = 3;
inline void Entry::clear_deleted() { _impl_.deleted_ = 0; }
inline int32_t Entry::_internal_deleted() const { return _impl_.deleted_; }
inline int32_t Entry::deleted() const {
  // @@protoc_insertion_point(field_get:Entry.deleted)
  return _internal_deleted();
}
inline void Entry::_internal_set_deleted(int32_t value) {

  _impl_.deleted_ = value;
}
inline void Entry::set_deleted(int32_t value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:Entry.deleted)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_entry_2eproto
